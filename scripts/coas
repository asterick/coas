#!/usr/bin/env python

import sys, argparse
from coas_format import (intelHex, mapping, binaryOutput, datOutput, verilog)
from coas import (Assembler, AssemblerException)

parser = argparse.ArgumentParser()
parser.add_argument('-l', action='store', dest='list_file',
                    help='Output mapping file')
parser.add_argument('-e', action='store', dest='reloc_file',
                    help='Output relocation file')
parser.add_argument('-x', action='store', dest='hex_file',
                    help='Output hex file')
parser.add_argument('-o', action='store', dest='big_file',
                    help='Output as a big-endian binary')
parser.add_argument('-u', action='store', dest='little_file',
                    help='Output as a little-endian binary')
parser.add_argument('-d', action='store', dest='dat_file',
                    help='Output as a notch-style DAT assembly')
parser.add_argument('-v', action='store', dest='verilog_file',
                    help='Output as verilog initialization format')
parser.add_argument('source', action="store", help='Source assembly file')


ns = parser.parse_args()

try:
    a = Assembler()
    data, lableMap, relocations = a.assemble(ns.source, relocate=ns.reloc_file)

    if ns.list_file:
        print >>file(ns.list_file, "w"), mapping(lableMap)
    if ns.reloc_file:
        print >>file(ns.reloc_file, "w"), ', '.join([str(s) for s in relocations])

    if ns.big_file:
        file(ns.big_file, "wb").write(binaryOutput(data))
    if ns.little_file:
        file(ns.little_file, "wb").write(binaryOutput(data,"<"))
    if ns.hex_file:
        print >>file(ns.hex_file, "w"), '\n'.join(intelHex(data))
    if ns.dat_file:
        print >>file(ns.dat_file, "w"), ''.join(datOutput(data))
    if ns.verilog_file == '--verilog':
        print >>file(ns.verilog_file, "w"), "@0000\n%s\n" % ''.join(verilog(data))
except AssemblerException as e:
    print e 
