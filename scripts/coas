#!/usr/bin/env python

import sys
from coas import (Assembler, AssemblerException, intelHex, mapping,
    binaryOutput, datOutput, verilog)


if len(sys.argv) < 2:
    print """
Usage: %s [options] <input.src>
Options:
--list=filename     Output mapping file
--hex=filename      Output as a hex file
--output=filename   Output as a big-endian binary
--dat=filename      Output as a notch-style DAT assembly
--verilog=filename  Output as verilog initialization format
""" % sys.argv[0]
else:
    parameters = dict(a.split("=") for a in sys.argv[1:-1])
    a = Assembler()
    try:
        bin, map, relocations = a.assemble(sys.argv[-1], relocate=('--reloc' in parameters))
        
        for opt, arg in parameters.items():

            if opt == '--list':
                print >>file(arg, "w"), '\n'.join(mapping(map))
            elif opt == '--reloc':
                print >>file(arg, "w"), ', '.join([str(s) for s in relocations])
            elif opt == '--output':
                print >>file(arg, "wb"), binaryOutput(bin)
            elif opt == '--hex':
                print >>file(arg, "w"), '\n'.join(intelHex(bin))
            elif opt == '--dat':
                print >>file(arg, "w"), ''.join(datOutput(bin))
            elif opt == '--verilog':
                print >>file(arg, "w"), "@0000\n%s\n" % ''.join(verilog(bin))
            else:
                print "unrecognized option", opt

    except AssemblerException as e:
        print e 
